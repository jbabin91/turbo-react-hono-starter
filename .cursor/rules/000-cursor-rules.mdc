---
description: Use ALWAYS when creating, updating, or learning rules to ensure consistent rule format
globs: .cursor/rules/*.mdc
alwaysApply: false
---

# Cursor Rules Format

<version>1.1.0</version>

## Quick Start Template

<example>
    // mdc
    ---
    description: ACTION when TRIGGER to OUTCOME
    globs: path/to/*.{ext}
    ---

    # Rule Title

    ## Context
    - When this rule applies
    - Required conditions

    ## Requirements
    - [ ] Requirement 1
    - [ ] Requirement 2

    ## Examples
    <example>
        // Good example
        const goodExample = true;
    </example>

    <example type="invalid">
        // Bad example
        const badExample = false;
    </example>
</example>

## Core Structure

### Required Fields

#### Frontmatter

The following fields are allowed:

- `description`: Must follow ACTION TRIGGER OUTCOME format
- `globs`: Pattern for matching relevant files and folders
- `alwaysApply`: Boolean flag indicating if the rule should be applied regardless of glob matches (default: false)

<example>
---
description: ACTION when TRIGGER to OUTCOME
globs: path/to/*.{ext}
alwaysApply: false
---
</example>

<example type="invalid">
---
description: Some description
globs: *.{js,ts}
customField: value  # Invalid: only description, globs, and alwaysApply allowed
---
</example>

#### Body

- `<version>X.Y.Z</version>`: Semantic version number
- `context`: Clear usage conditions and prerequisites
- `requirements`: Actionable, testable items
- `examples`: At least one valid and one invalid example

### Required Sections

1. Frontmatter (description + globs)
2. Title (H1)
3. Version tag
4. Context
5. Requirements
6. Examples (at least one valid, one invalid)

### XML Tag Validation

- Tags must be properly nested
- Content must be indented 2 spaces
- Closing tags at parent indentation
- Code blocks within `<example>` tags:
  - Use indented style (2 spaces)
  - Do not use fenced code blocks (```)
  - Language hints should be in comments
- Do not use outer code blocks around MDC file content
- Allowed attributes:
  - `type`: Only on `<example>` ("invalid" | "valid")
  - `version`: Only on `<version>` (semver format)

<example>
    // typescript
    function example() {
        return true;
    }
</example>

<example type="invalid">
```typescript
// Don't use fenced blocks in MDC files
function example() {
    return true;
}
```
</example>

## File Organization

### Location & Naming

- Path: `.cursor/rules/`
- Format: `PREFIX-name.mdc`
- Prefixes:
  - `0XX`: Core standards
  - `1XX`: Tool configs
  - `3XX`: Testing standards
  - `4XX`: Documentation standards
  - `1XXX`: Language rules
  - `2XXX`: Framework rules
  - `8XX`: Workflows
  - `9XX`: Templates
  - `_name`: Private rules

### Common Glob Patterns

- Core: `.cursor/rules/*.mdc`
- Language: `src/**/*.{js,ts}`
- Tests: `**/*.test.{js,ts,tsx}`
- React: `src/**/components/**/*.tsx`
- Docs: `docs/**/*.md`
- Config: `*.config.{js,ts,json}`
- Build: `dist/**/*`

## Formatting Guidelines

### XML Tags

- Allowed tags:

  ```xml
  <example>    // Code examples
  <danger>     // Critical warnings
  <required>   // Must-have items
  <rules>      // Rule collections
  <rule>       // Single rule
  <critical>   // Breaking changes
  <version>    // Rule version
  ```

### AI Optimization

1. Keep descriptions under 120 chars
2. Use ACTION TRIGGER OUTCOME format
3. Minimize token usage
4. Remove redundancy
5. Use standard glob patterns

<critical>
- NEVER include verbose explanations
- Keep files concise but impactful
- Frontmatter: Only use documented fields (description, globs, alwaysApply)
- Always include validation examples
</critical>

## Rule Creation Checklist

- [ ] Descriptive title
- [ ] Clear ACTION TRIGGER OUTCOME
- [ ] Appropriate glob pattern
- [ ] Version tag
- [ ] Context section
- [ ] Testable requirements
- [ ] Valid/invalid examples
- [ ] Proper indentation
- [ ] No redundant information
