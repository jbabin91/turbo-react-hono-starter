---
description: ENFORCE better-auth standards when implementing authentication in API endpoints
globs: ["packages/api/**/*.ts", "apps/**/routes/**/*.ts", "packages/auth/**/*.ts"]
alwaysApply: true
---

# Better Auth Standards

<version>1.0.0</version>

## Related Standards

- `drizzle-standards`: Database schema patterns
- `hono-standards`: API middleware patterns
- `zod-validation`: Input validation patterns
- `hono-openapi`: API documentation standards

## Context

- Defines standards for better-auth implementation
- Ensures secure authentication and session management
- Maintains type safety and proper error handling

> ðŸš¨ **Warning:** Authentication is critical for security. Follow these standards strictly.

## Critical Rules

<critical>
### Security
- NEVER store sensitive data in JWT tokens or client state
- ALWAYS use environment variables for sensitive configuration
- ALWAYS use secure cookie settings in production
- NEVER expose detailed error messages to clients
- ALWAYS implement rate limiting for auth endpoints
- NEVER skip CSRF protection for mutation endpoints
- ALWAYS validate auth tokens before processing requests
- NEVER store plain text passwords

### Database

- ALWAYS use Better Auth's table structure
- ALWAYS keep auth tables separate from app tables
- ALWAYS implement proper indexes and relations
- ALWAYS use transactions for critical operations
- ALWAYS use proper cleanup routines
- NEVER skip database migrations

### Performance

- ALWAYS enable cookie caching for session data
- ALWAYS use React Query for client-side caching
- ALWAYS configure proper connection pooling
- ALWAYS implement proper invalidation strategies
- NEVER disable performance optimizations

### Implementation

- ALWAYS use type-safe middleware
- ALWAYS implement proper error boundaries
- ALWAYS validate input data
- ALWAYS use proper logging with redaction
- NEVER skip access control checks
</critical>

## Core Examples

### Basic Setup

<example>
    // typescript
    const auth = new BetterAuth({
      jwt: {
        secret: process.env.JWT_SECRET,
        expiresIn: '15m',
        cookie: {
          secure: process.env.NODE_ENV === 'production',
          httpOnly: true,
          sameSite: 'lax'
        }
      },
      security: {
        rateLimiting: { enabled: true, max: 5 },
        passwordHashing: { algorithm: 'argon2id' }
      }
    })
</example>

### Database Schema

<example>
    // typescript
    export const authUsers = pgTable('auth_users', {
      ...baseColumns,
      email: text('email').notNull().unique(),
      password: text('password').notNull(),
      role: text('role').notNull().default('user'),
      metadata: jsonb('metadata').$type<Record<string, unknown>>()
    }, (table) => ({
      emailIdx: index('auth_users_email_idx').on(table.email)
    }))
</example>

### Middleware

<example>
    // typescript
    export const requireAuth = (
      auth: BetterAuth,
      options?: { roles?: string[] }
    ): MiddlewareHandler => {
      return async (c, next) => {
        const session = await auth.validateRequest(c)
        if (options?.roles?.includes(session.user.role)) {
          throw new HTTPException(403)
        }
        c.set('session', session)
        await next()
      }
    }
</example>

### Error Handling

<example>
    // typescript
    app.onError((err, c) => {
      if (err instanceof auth.AuthError) {
        log.warn({ error: err, type: 'auth_error' })
        return c.json({ code: 401, message: 'Authentication failed' }, 401)
      }
      throw err
    })
</example>

### Common Anti-patterns

<example type="invalid">
    // typescript
    // Don't store sensitive data
    const session = await auth.login({
      user: { password: user.password }  // Wrong
    })

    // Don't skip rate limiting
    app.post('/login', async (c) => {  // Wrong
      return auth.login(c.req.valid('json'))
    })

    // Don't use insecure settings
    const auth = new BetterAuth({
      cookie: { secure: false }  // Wrong
    })

    // Don't expose errors
    catch (error) {
      return c.json({ stack: error.stack })  // Wrong
    }
</example>

## Implementation Checklist

### Setup

- [ ] Configure secure JWT settings
- [ ] Implement rate limiting
- [ ] Set secure cookie options
- [ ] Configure CSRF protection
- [ ] Set up proper logging

### Database

- [ ] Use proper schema structure
- [ ] Implement indexes
- [ ] Set up cleanup routines
- [ ] Configure connection pooling

### Security

- [ ] Validate all inputs
- [ ] Implement access control
- [ ] Handle errors securely
- [ ] Monitor auth failures

### Testing

- [ ] Test auth flows
- [ ] Test error handling
- [ ] Test rate limiting
- [ ] Test security configs
