---
description: ENFORCE Hono.js standards when CREATING or MODIFYING endpoints to ENSURE consistent API implementation
globs: ["packages/api/**/*.ts", "apps/**/routes/**/*.ts"]
alwaysApply: true
---

# Hono.js Standards

<version>1.0.0</version>

## Table of Contents

- [Context](mdc:#context)
- [Requirements](mdc:#requirements)
  - [Route Organization](mdc:#route-organization)
  - [Middleware & Error Handling](mdc:#middleware--error-handling)
  - [Type Safety & Context](mdc:#type-safety--context)
  - [Response Patterns](mdc:#response-patterns)
  - [Performance](mdc:#performance)
- [Examples](mdc:#examples)

## Context

- Defines standards for Hono.js application development
- Ensures consistent API implementation
- Promotes best practices for middleware and handlers
- Maintains performance and type safety

<critical>
### Security & Error Handling
- ALWAYS validate request input before processing
- NEVER expose internal errors to clients
- ALWAYS use HTTPException for error handling
- NEVER skip authentication/authorization checks
- ALWAYS implement proper rate limiting
- NEVER log sensitive information

### Type Safety & Context

- ALWAYS use type-safe middleware handlers
- NEVER use 'any' type in route handlers
- ALWAYS define proper context variables
- NEVER skip parameter validation
- ALWAYS use zod for request validation
- NEVER use raw type assertions

### Performance & Patterns

- ALWAYS set proper cache headers
- NEVER skip response status codes
- ALWAYS use proper content types
- NEVER mix response formats
- ALWAYS implement proper error boundaries
- NEVER skip performance optimizations

### Implementation

- ALWAYS follow RESTful patterns
- NEVER use raw Response objects
- ALWAYS group related routes
- NEVER skip middleware composition
- ALWAYS document API endpoints
- NEVER duplicate route handlers
</critical>

## Requirements

### Route Organization

- [ ] Use feature-based directory structure
- [ ] Group related endpoints under feature routers
- [ ] Implement proper middleware composition
- [ ] Use appropriate HTTP methods
- [ ] Handle errors consistently

### Middleware & Error Handling

- [ ] Apply middleware in correct order
- [ ] Implement proper error boundaries
- [ ] Use type-safe middleware
- [ ] Handle async operations properly
- [ ] Set up global error handlers

### Type Safety & Context

- [ ] Define proper context variables
- [ ] Use type-safe request validation
- [ ] Implement proper type guards
- [ ] Maintain consistent error types
- [ ] Use proper type inference

### Response Patterns

- [ ] Use consistent response formats
- [ ] Set proper status codes
- [ ] Include appropriate headers
- [ ] Handle streaming properly
- [ ] Implement proper caching

### Performance

- [ ] Enable compression for large responses
- [ ] Implement proper caching strategies
- [ ] Handle connection cleanup
- [ ] Use streaming for large data
- [ ] Monitor response times

## Examples

### Core Route Pattern

<example>
  // typescript
  import { Hono } from 'hono'
  import { logger } from '../middleware/logger'
  import { auth } from '../middleware/auth'
  import { z } from 'zod'

  // Feature router with middleware
  const posts = new Hono()
    .use('*', logger())
    .use('*', auth())
    .get('/', (c) => c.json({ message: 'List posts' }, 200))
    .post('/', async (c) => {
      const body = await c.req.valid('json')
      return c.json({ id: 'created' }, 201)
    })

  export default posts
</example>

### Type-Safe Middleware

<example>
  // typescript
  import { MiddlewareHandler } from 'hono'
  import { HTTPException } from 'hono/http-exception'

  type Variables = {
    user: { id: string; role: string }
  }

  export const auth: MiddlewareHandler<{ Variables: Variables }> =
    async (c, next) => {
      const token = c.req.header('Authorization')
      if (!token) throw new HTTPException(401)
      c.set('user', await validateToken(token))
      await next()
    }
</example>

### Error Handling Pattern

<example>
  // typescript
  app.onError((err, c) => {
    if (err instanceof HTTPException) {
      return c.json({
        code: err.status,
        message: err.message
      }, err.status)
    }

    console.error('Internal error:', err)
    return c.json({
      code: 500,
      message: 'Internal Server Error'
    }, 500)
  })
</example>

### Response Patterns

<example>
  // typescript
  // JSON with proper status
  app.get('/data', (c) => c.json({ data: 'value' }, 200))

  // Streaming with cleanup
  app.get('/stream', (c) => {
    return c.stream(async (stream) => {
      try {
        await streamData(stream)
      } catch (e) {
        if (e.name === 'AbortError') return
        throw e
      }
    })
  })

  // File with proper headers
  app.get('/file', (c) => {
    return c.body(file, 200, {
      'Content-Type': 'application/pdf',
      'Cache-Control': 'public, max-age=3600'
    })
  })
</example>

<example type="invalid">
  // typescript
  // Don't use raw Response
  return new Response('data')  // Wrong: Use Hono context methods

  // Don't mix response types
  if (condition) {
    return c.json(data)
  }
  return c.text(data)  // Wrong: Inconsistent response type

  // Don't skip error handling
  throw new Error('Failed')  // Wrong: Use HTTPException

  // Don't skip status codes
  return c.json({ data })  // Wrong: Missing status code
</example>

### Performance

<example>
  // typescript
  import { compress } from 'hono/compress'
  import { cache } from 'hono/cache'
  import { timing } from 'hono/timing'

  // Enable compression
  app.use('*', compress())

  // Implement caching
  app.get('/api/data', cache({
    cacheName: 'api-cache',
    cacheControl: 'max-age=3600',
    wait: true
  }), (c) => c.json(data))

  // Handle streaming with cleanup
  app.get('/api/stream', async (c) => {
    const controller = new AbortController()

    // Cleanup on client disconnect
    c.req.raw.signal.addEventListener('abort', () => {
      controller.abort()
    })

    return c.stream(async (stream) => {
      try {
        await streamData(stream, controller.signal)
      } catch (e) {
        if (e.name === 'AbortError') return
        throw e
      }
    })
  })

  // Monitor performance
  app.use('*', timing())
  app.use('*', async (c, next) => {
    const start = performance.now()
    await next()
    const duration = performance.now() - start

    if (duration > 1000) {
      console.warn(`Slow response: ${c.req.path} took ${duration}ms`)
    }
  })
</example>

<example type="invalid">
  // typescript
  // Don't skip compression for large responses
  app.get('/api/large-data', (c) => {
    return c.json(largeData)  // Wrong: Missing compression
  })

  // Don't ignore connection state
  app.get('/api/stream', (c) => {
    return c.stream(async (stream) => {
      // Wrong: No cleanup or error handling
      while (true) {
        await stream.write(data)
      }
    })
  })

  // Don't use blocking operations
  app.get('/api/slow', async (c) => {
    const result = await heavyOperation()  // Wrong: Blocks event loop
    return c.json(result)
  })

  // Don't skip cache headers
  app.get('/api/static', (c) => {
    return c.json(data)  // Wrong: Missing cache headers
  })
</example>

### Implementation Checklist

#### Setup

- [ ] Configure error handlers
- [ ] Set up middleware pipeline
- [ ] Configure request validation
- [ ] Set up proper logging
- [ ] Configure performance options

#### Routes

- [ ] Group by feature
- [ ] Implement proper validation
- [ ] Add proper error handling
- [ ] Set correct status codes
- [ ] Add proper caching

#### Security

- [ ] Validate all inputs
- [ ] Implement rate limiting
- [ ] Set secure headers
- [ ] Handle auth properly
- [ ] Sanitize responses

#### Testing

- [ ] Test happy paths
- [ ] Test error cases
- [ ] Test middleware
- [ ] Test performance
- [ ] Test security
